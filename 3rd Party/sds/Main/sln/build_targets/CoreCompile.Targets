<Project DefaultTargets="CoreCompile" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="BeforeCompile" Condition="'$(PlatformTarget)' == 'x64'">
    <ItemGroup>
      <CleanupIntermediate Include="$(ProjectDir)\obj\$(Configuraton)\**\*.*"/>
    </ItemGroup>

    <Delete Files="@(CleanupIntermediate)" ContinueOnError="true"/>
  </Target>

  <Target
    Name="CoreCompile"
    Inputs="$(MSBuildAllProjects);
                @(Compile);                               
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation); 
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs);
                @(LinkResource)"
    Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 @(_DebugSymbolsIntermediatePath);                 
                 $(NonExistentFile);
                 @(CustomAdditionalCompileOutputs)"
    Returns=""
    DependsOnTargets="$(CoreCompileDependsOn)"
    >
    <!-- These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant. -->
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
      <NoWarn>$(NoWarn);1701;1702</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
      <!-- If we are building in visual studio setting the CscToolPath will prevent the inproc compiler from being used during compile-->
      <CscToolPath Condition="'$(CscToolPath)' == '' and '$(BuildingInsideVisualStudio)' != 'true'" >$(MsBuildToolsPath)</CscToolPath>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetingClr2Framework)'=='true'">
      <ReferencePath>
        <EmbedInteropTypes/>
      </ReferencePath>
    </ItemGroup>

    <PropertyGroup>
      <!-- If the user has specified AppConfigForCompiler, we'll use it. If they have not, but they set UseAppConfigForCompiler,
                 then we'll use AppConfig -->
      <AppConfigForCompiler Condition="'$(AppConfigForCompiler)' == '' and '$(UseAppConfigForCompiler)' == 'true'">$(AppConfig)</AppConfigForCompiler>
    </PropertyGroup>

    <!-- Condition is to filter out the _CoreCompileResourceInputs so that it doesn't pass in culture resources to the compiler -->
    <Csc  Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
          AdditionalLibPaths="$(AdditionalLibPaths)"
          AddModules="@(AddModules)"
          AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
          BaseAddress="$(BaseAddress)"
          CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
          CodePage="$(CodePage)"
          DebugType="$(DebugType)"
          DefineConstants="$(DefineConstants)"
          DelaySign="$(DelaySign)"
          DisabledWarnings="$(NoWarn)"
          DocumentationFile="@(DocFileItem)"
          EmitDebugInformation="$(DebugSymbols)"
          ErrorReport="$(ErrorReport)"
          FileAlignment="$(FileAlignment)"
          GenerateFullPaths="$(GenerateFullPaths)"
          KeyContainer="$(KeyContainerName)"
          KeyFile="$(KeyOriginatorFile)"
          LangVersion="$(LangVersion)"
          LinkResources="@(LinkResource)"
          MainEntryPoint="$(StartupObject)"
          ModuleAssemblyName="$(ModuleAssemblyName)"
          NoConfig="true"
          NoLogo="$(NoLogo)"
          NoStandardLib="$(NoCompilerStandardLib)"
          NoWin32Manifest="$(NoWin32Manifest)"
          Optimize="$(Optimize)"
          OutputAssembly="@(IntermediateAssembly)"
          PdbFile="$(PdbFile)"
          Platform="$(PlatformTarget)"
          References="@(ReferencePath)"
          Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
          ResponseFiles="$(CompilerResponseFile)"
          Sources="@(Compile)"
          TargetType="$(OutputType)"
          ToolExe="$(CscToolExe)"
          ToolPath="$(CscToolPath)"
          TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
          UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
          Utf8Output="$(Utf8Output)"
          WarningLevel="$(WarningLevel)"
          WarningsAsErrors="$(WarningsAsErrors)"
          WarningsNotAsErrors="$(WarningsNotAsErrors)"
          Win32Icon="$(ApplicationIcon)"
          Win32Manifest="$(Win32Manifest)"
          Win32Resource="$(Win32Resource)"
              />

    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/>

  </Target>

  <Target
      Name="CopyFilesToOutputDirectory"
      DependsOnTargets="
            ComputeIntermediateSatelliteAssemblies;
            _CopyFilesMarkedCopyLocal;
            _CopySourceItemsToOutputDirectory;
            _CopyAppConfigFile;
            _CopyManifestFiles;
            _CheckForCompileOutputs;
            _SGenCheckForOutputs">

    <Copy
        SourceFiles="@(IntermediateAssembly);@(LinkResource)"
        DestinationFolder="$(OutDir)">

      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- This is required for server build and correct separation between x86 and x64 build.
         AnyCPU platform is not supported because of native CPP library used as a linkresource -->
    <MakeDir Condition="'$(PlatformTarget)' == 'x86'" ContinueOnError="true" Directories="$(ProjectDir)bin\x32"/>
    <Copy Condition="'$(PlatformTarget)' == 'x86'" SourceFiles="@(IntermediateAssembly);@(LinkResource)" DestinationFolder="$(ProjectDir)bin\x32\"/>

    <MakeDir Condition="'$(PlatformTarget)' == 'x64'" ContinueOnError="true" Directories="$(ProjectDir)bin\x64"/>
    <Copy Condition="'$(PlatformTarget)' == 'x64'" SourceFiles="@(IntermediateAssembly);@(LinkResource)" DestinationFolder="$(ProjectDir)bin\x64\"/>
      <!--End of section required by server build-->

      <Message Importance="High" Text="$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')" />

    <!-- Copy the additional modules. -->
    <Copy
        SourceFiles="@(AddModules)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the serialization assembly if it exists. -->
    <Copy
        SourceFiles="$(IntermediateOutputPath)$(_SGenDllName)"
        DestinationFiles="$(OutDir)$(_SGenDllName)"
        SkipUnchangedFiles="true"
        Condition="'$(_SGenDllCreated)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the debug information file (.pdb), if any -->
    <Copy
        SourceFiles="$(IntermediateOutputPath)$(TargetName).pdb"
        DestinationFiles="$(OutDir)$(TargetName).pdb"
        SkipUnchangedFiles="true"
        Condition="'$(_DebugSymbolsProduced)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the resulting XML documentation file, if any. -->
    <Copy
        SourceFiles="@(DocFileItem)"
        DestinationFiles="@(FinalDocFile)"
        SkipUnchangedFiles="true"
        Condition="'$(_DocumentationFileProduced)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy satellite assemblies. -->
    <Copy
        SourceFiles="@(IntermediateSatelliteAssembliesWithTargetPath)"
        DestinationFiles="@(IntermediateSatelliteAssembliesWithTargetPath->'$(OutDir)%(Culture)\$(TargetName).resources.dll')"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!--
        Copy COM reference wrappers, isolated COM references, COM references included by
        native (manifest) references, native (manifest) reference files themselves.
        -->
    <Copy
        SourceFiles="@(ReferenceComWrappersToCopyLocal); @(ResolvedIsolatedComModules); @(_DeploymentLooseManifestFile); @(NativeReferenceFile)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>

    </Copy>

  </Target>
</Project>
